// src/lib/pdfService.ts
import { TxRecord } from '../store/txStore';

export interface StatementData {
  transactions: TxRecord[];
  userName: string;
  startDate?: Date;
  endDate?: Date;
}

export class PDFService {
  private static instance: PDFService;

  static getInstance(): PDFService {
    if (!PDFService.instance) {
      PDFService.instance = new PDFService();
    }
    return PDFService.instance;
  }

  async generateTransactionStatement(data: StatementData): Promise<string> {
    try {
      // Generate CSV content
      const csvContent = this.generateCSVContent(data);
      
      console.log('Statement generated successfully');
      console.log('CSV Content:', csvContent);
      
      return csvContent;
      
    } catch (error) {
      console.error('Error generating statement:', error);
      throw new Error(`Failed to generate statement: ${error}`);
    }
  }
  
  private generateCSVContent(data: StatementData): string {
    const currentDate = new Date();
    const startDate = data.startDate || new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    const endDate = data.endDate || currentDate;
    
    // Calculate summary
    const totalDeposits = data.transactions
      .filter(tx => tx.type === 'deposit')
      .reduce((sum, tx) => sum + tx.amount, 0);
    
    const totalWithdrawals = Math.abs(data.transactions
      .filter(tx => tx.type === 'withdraw')
      .reduce((sum, tx) => sum + tx.amount, 0));
    
    let csv = '';
    
    // Header
    csv += 'TREVMOBILE TRANSACTION STATEMENT\n';
    csv += `Account Holder: ${data.userName}\n`;
    csv += `Statement Period: ${this.formatDate(startDate)} - ${this.formatDate(endDate)}\n`;
    csv += `Generated on: ${this.formatDate(currentDate)}\n\n`;
    
    // Summary
    csv += 'SUMMARY\n';
    csv += `Total Deposits,₦${totalDeposits.toFixed(2)}\n`;
    csv += `Total Withdrawals,₦${totalWithdrawals.toFixed(2)}\n\n`;
    
    // Transaction details
    csv += 'TRANSACTION DETAILS\n';
    csv += 'Date,Description,Type,Amount (₦),Transaction ID\n';
    
    // Sort transactions by timestamp (newest first)
    const sortedTransactions = [...data.transactions].sort((a, b) => 
      (b.timestamp || 0) - (a.timestamp || 0)
    );
    
    sortedTransactions.forEach(transaction => {
      const date = this.formatDate(new Date(transaction.timestamp || Date.now()));
      const description = transaction.title;
      const type = transaction.type.toUpperCase();
      const amount = transaction.amount > 0 
        ? `+₦${transaction.amount.toFixed(2)}` 
        : `-₦${Math.abs(transaction.amount).toFixed(2)}`;
      
      csv += `${date},"${description}",${type},"${amount}",${transaction.id}\n`;
    });
    
    csv += '\n';
    csv += 'Generated by TrevMobile - Your Digital Wallet\n';
    
    return csv;
  }
  
  private formatDate(date: Date): string {
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    });
  }
  
  private formatDateForFilename(date: Date): string {
    return date.toISOString().split('T')[0]; // YYYY-MM-DD format
  }
}

// Export singleton instance
export const pdfService = PDFService.getInstance();